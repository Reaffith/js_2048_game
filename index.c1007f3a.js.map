{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js"],"sourcesContent":["\"use strict\";\nvar $a5fd07fa01589658$exports = {};\n\"use strict\";\nconst $a5fd07fa01589658$var$BOARD_SIZE = 4;\nclass $a5fd07fa01589658$var$Game {\n    constructor(initialState = [\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ],\n        [\n            0,\n            0,\n            0,\n            0\n        ]\n    ]){\n        this.score = 0;\n        this.initialState = initialState;\n        this.currentState = initialState;\n        this.isStarted = false;\n    }\n    moveLeft() {\n        let isAbleToMove = false;\n        for(let j = 0; j < $a5fd07fa01589658$var$BOARD_SIZE; j++)for(let l = 1; l < $a5fd07fa01589658$var$BOARD_SIZE; l++){\n            if (this.currentState[j][l] === 0) isAbleToMove = true;\n            else if (this.currentState[j][l] === this.currentState[j][l - 1]) isAbleToMove = true;\n            else if (this.currentState[j][0] === 0) isAbleToMove = true;\n        }\n        if (isAbleToMove && this.isStarted) {\n            for(let i = 0; i < $a5fd07fa01589658$var$BOARD_SIZE; i++)for(let n = 0; n < $a5fd07fa01589658$var$BOARD_SIZE; n++){\n                let changed = false;\n                const CURRENT = this.currentState[i][n];\n                if (CURRENT !== 0) for(let k = n + 1; k < $a5fd07fa01589658$var$BOARD_SIZE; k++){\n                    const NEIGHBOR = this.currentState[i][k];\n                    if (NEIGHBOR !== 0) {\n                        if (NEIGHBOR === CURRENT) {\n                            this.currentState[i][n] = CURRENT * 2;\n                            this.currentState[i][k] = 0;\n                            this.score += CURRENT * 2;\n                            changed = true;\n                        }\n                    } else if (NEIGHBOR === 0 && !changed) switch(k){\n                        case 1:\n                            if (this.currentState[i][k + 1] === 0) {\n                                if (this.currentState[i][k + 2] === CURRENT) {\n                                    this.currentState[i][n] = CURRENT * 2;\n                                    this.currentState[i][k + 2] = 0;\n                                    changed = true;\n                                    this.score += CURRENT * 2;\n                                }\n                            } else if (this.currentState[i][k + 1] === CURRENT && !changed) {\n                                this.currentState[i][n] = CURRENT * 2;\n                                this.currentState[i][k + 1] = 0;\n                                this.score += CURRENT * 2;\n                            }\n                            break;\n                        case 2:\n                            if (this.currentState[i][k + 1] === CURRENT) {\n                                this.currentState[i][n] = CURRENT * 2;\n                                this.currentState[i][k + 1] = 0;\n                                this.score += CURRENT * 2;\n                            }\n                            break;\n                    }\n                }\n            }\n            for(let i = 0; i < $a5fd07fa01589658$var$BOARD_SIZE; i++){\n                for(let n = 1; n < $a5fd07fa01589658$var$BOARD_SIZE; n++)if (this.currentState[i][n] !== 0) {\n                    const current = this.currentState[i][n];\n                    switch(n){\n                        case 1:\n                            if (this.currentState[i][0] === 0) {\n                                this.currentState[i][0] = current;\n                                this.currentState[i][n] = 0;\n                            }\n                            break;\n                        case 2:\n                            if (this.currentState[i][1] === 0) {\n                                if (this.currentState[i][0] === 0) {\n                                    this.currentState[i][0] = current;\n                                    this.currentState[i][n] = 0;\n                                } else {\n                                    this.currentState[i][1] = current;\n                                    this.currentState[i][n] = 0;\n                                }\n                            }\n                            break;\n                        case 3:\n                            if (this.currentState[i][2] === 0) {\n                                if (this.currentState[i][1] === 0) {\n                                    if (this.currentState[i][0] === 0) {\n                                        this.currentState[i][0] = current;\n                                        this.currentState[i][n] = 0;\n                                    } else {\n                                        this.currentState[i][1] = current;\n                                        this.currentState[i][n] = 0;\n                                    }\n                                } else {\n                                    this.currentState[i][2] = current;\n                                    this.currentState[i][n] = 0;\n                                }\n                            }\n                    }\n                }\n            }\n            this.clearField();\n            this.redrawGameField();\n            this.createPlayCell();\n        }\n    }\n    moveRight() {\n        let isAbleToMove = false;\n        for(let j = 0; j < $a5fd07fa01589658$var$BOARD_SIZE; j++)for(let l = 1; l < $a5fd07fa01589658$var$BOARD_SIZE; l++){\n            if (this.currentState[j][l] === 0) isAbleToMove = true;\n            else if (this.currentState[j][l] === this.currentState[j][l - 1]) isAbleToMove = true;\n        }\n        if (isAbleToMove && this.isStarted) {\n            for(let i = 0; i < $a5fd07fa01589658$var$BOARD_SIZE; i++)for(let n = $a5fd07fa01589658$var$BOARD_SIZE - 1; n >= 0; n--){\n                let changed = false;\n                const CURRENT = this.currentState[i][n];\n                if (CURRENT !== 0) for(let k = n - 1; k >= 0; k--){\n                    const NEIGHBOR = this.currentState[i][k];\n                    if (NEIGHBOR !== 0) {\n                        if (NEIGHBOR === CURRENT && k === n - 1) {\n                            this.currentState[i][n] = CURRENT * 2;\n                            this.currentState[i][k] = 0;\n                            changed = true;\n                        }\n                    } else if (NEIGHBOR === CURRENT && !changed) switch(k){\n                        case 0:\n                            if (this.currentState[i][1] === 0 && !changed) {\n                                if (this.currentState[i][2] === 0) {\n                                    this.currentState[i][n] = CURRENT * 2;\n                                    this.currentState[i][k] = 0;\n                                    changed = true;\n                                    this.score += CURRENT * 2;\n                                }\n                            }\n                            break;\n                        case 1:\n                            if (this.currentState[i][2] === 0 && !changed) {\n                                this.currentState[i][n] = CURRENT * 2;\n                                this.currentState[i][k] = 0;\n                                changed = true;\n                                this.score += CURRENT * 2;\n                            }\n                            break;\n                    }\n                }\n            }\n            for(let i = 0; i < $a5fd07fa01589658$var$BOARD_SIZE; i++){\n                for(let n = $a5fd07fa01589658$var$BOARD_SIZE - 1; n >= 0; n--)if (this.currentState[i][n] !== 0) {\n                    const current = this.currentState[i][n];\n                    switch(n){\n                        case 0:\n                            if (this.currentState[i][1] === 0) {\n                                if (this.currentState[i][2] === 0) {\n                                    if (this.currentState[i][3] === 0) {\n                                        this.currentState[i][3] = current;\n                                        this.currentState[i][n] = 0;\n                                    } else {\n                                        this.currentState[i][2] = current;\n                                        this.currentState[i][n] = 0;\n                                    }\n                                } else {\n                                    this.currentState[i][1] = current;\n                                    this.currentState[i][n] = 0;\n                                }\n                            }\n                            break;\n                        case 1:\n                            if (this.currentState[i][2] === 0) {\n                                if (this.currentState[i][3] === 0) {\n                                    this.currentState[i][3] = current;\n                                    this.currentState[i][n] = 0;\n                                } else {\n                                    this.currentState[i][2] = current;\n                                    this.currentState[i][n] = 0;\n                                }\n                            }\n                            break;\n                        case 2:\n                            if (this.currentState[i][3] === 0) {\n                                this.currentState[i][3] = current;\n                                this.currentState[i][n] = 0;\n                            }\n                    }\n                }\n            }\n            this.clearField();\n            this.redrawGameField();\n            this.createPlayCell();\n        }\n    }\n    moveUp() {\n        let isAbleToMove = false;\n        for(let j = 1; j < $a5fd07fa01589658$var$BOARD_SIZE; j++)for(let l = 0; l < $a5fd07fa01589658$var$BOARD_SIZE; l++){\n            if (this.currentState[j][l] === 0) isAbleToMove = true;\n            else if (this.currentState[j][l] === this.currentState[j - 1][l]) isAbleToMove = true;\n            else if (this.currentState[0][l] === 0) isAbleToMove = true;\n        }\n        if (isAbleToMove && this.isStarted) {\n            for(let i = 0; i < $a5fd07fa01589658$var$BOARD_SIZE; i++)for(let n = 0; n < $a5fd07fa01589658$var$BOARD_SIZE; n++){\n                const CURRENT = this.currentState[i][n];\n                switch(i){\n                    case 0:\n                        if (this.currentState[1][n] === 0) {\n                            if (this.currentState[2][n] === 0) {\n                                if (this.currentState[3][n] === CURRENT) {\n                                    this.currentState[i][n] = 2 * CURRENT;\n                                    this.currentState[3][n] = 0;\n                                    this.score += CURRENT * 2;\n                                }\n                            } else if (this.currentState[2][n] === CURRENT) {\n                                this.currentState[i][n] = 2 * CURRENT;\n                                this.currentState[2][n] = 0;\n                                this.score += CURRENT * 2;\n                            }\n                        } else if (this.currentState[1][n] === CURRENT) {\n                            this.currentState[i][n] = 2 * CURRENT;\n                            this.currentState[1][n] = 0;\n                            this.score += CURRENT * 2;\n                        }\n                        break;\n                    case 1:\n                        if (this.currentState[2][n] === 0) {\n                            if (this.currentState[3][n] === CURRENT) {\n                                this.currentState[i][n] = 2 * CURRENT;\n                                this.currentState[3][n] = 0;\n                                this.score += CURRENT * 2;\n                            }\n                        } else if (this.currentState[2][n] === CURRENT) {\n                            this.currentState[i][n] = 2 * CURRENT;\n                            this.currentState[2][n] = 0;\n                            this.score += CURRENT * 2;\n                        }\n                        break;\n                    case 2:\n                        if (this.currentState[3][n] === CURRENT) {\n                            this.currentState[i][n] = 2 * CURRENT;\n                            this.currentState[3][n] = 0;\n                            this.score += CURRENT * 2;\n                        }\n                }\n            }\n            for(let i = 0; i < $a5fd07fa01589658$var$BOARD_SIZE; i++)for(let n = 0; n < $a5fd07fa01589658$var$BOARD_SIZE; n++)switch(i){\n                case 1:\n                    if (this.currentState[0][n] === 0) {\n                        this.currentState[0][n] = this.currentState[i][n];\n                        this.currentState[i][n] = 0;\n                    }\n                    break;\n                case 2:\n                    if (this.currentState[1][n] === 0) {\n                        if (this.currentState[0][n] === 0) {\n                            this.currentState[0][n] = this.currentState[i][n];\n                            this.currentState[i][n] = 0;\n                        } else {\n                            this.currentState[1][n] = this.currentState[i][n];\n                            this.currentState[i][n] = 0;\n                        }\n                    }\n                    break;\n                case 3:\n                    if (this.currentState[2][n] === 0) {\n                        if (this.currentState[1][n] === 0) {\n                            if (this.currentState[0][n] === 0) {\n                                this.currentState[0][n] = this.currentState[i][n];\n                                this.currentState[i][n] = 0;\n                            } else {\n                                this.currentState[1][n] = this.currentState[i][n];\n                                this.currentState[i][n] = 0;\n                            }\n                        } else {\n                            this.currentState[2][n] = this.currentState[i][n];\n                            this.currentState[i][n] = 0;\n                        }\n                    }\n            }\n            this.clearField();\n            this.redrawGameField();\n            this.createPlayCell();\n        }\n    }\n    moveDown() {\n        let isAbleToMove = false;\n        for(let j = 1; j < $a5fd07fa01589658$var$BOARD_SIZE; j++)for(let l = 0; l < $a5fd07fa01589658$var$BOARD_SIZE; l++){\n            if (this.currentState[j][l] === 0) isAbleToMove = true;\n            else if (this.currentState[j][l] === this.currentState[j - 1][l]) isAbleToMove = true;\n        }\n        if (isAbleToMove && this.isStarted) {\n            for(let i = $a5fd07fa01589658$var$BOARD_SIZE - 1; i >= 0; i--)for(let n = $a5fd07fa01589658$var$BOARD_SIZE - 1; n >= 0; n--){\n                const CURRENT = this.currentState[i][n];\n                switch(i){\n                    case 3:\n                        if (this.currentState[2][n] === 0) {\n                            if (this.currentState[1][n] === 0) {\n                                if (this.currentState[0][n] === CURRENT) {\n                                    this.currentState[i][n] = 2 * CURRENT;\n                                    this.currentState[0][n] = 0;\n                                    this.score += CURRENT * 2;\n                                }\n                            } else if (this.currentState[1][n] === CURRENT) {\n                                this.currentState[i][n] = 2 * CURRENT;\n                                this.currentState[1][n] = 0;\n                                this.score += CURRENT * 2;\n                            }\n                        } else if (this.currentState[2][n] === CURRENT) {\n                            this.currentState[i][n] = 2 * CURRENT;\n                            this.currentState[2][n] = 0;\n                            this.score += CURRENT * 2;\n                        }\n                        break;\n                    case 2:\n                        if (this.currentState[1][n] === 0) {\n                            if (this.currentState[0][n] === CURRENT) {\n                                this.currentState[i][n] = 2 * CURRENT;\n                                this.currentState[0][n] = 0;\n                                this.score += CURRENT * 2;\n                            }\n                        } else if (this.currentState[1][n] === CURRENT) {\n                            this.currentState[i][n] = 2 * CURRENT;\n                            this.currentState[1][n] = 0;\n                            this.score += CURRENT * 2;\n                        }\n                        break;\n                    case 1:\n                        if (this.currentState[0][n] === CURRENT) {\n                            this.currentState[i][n] = 2 * CURRENT;\n                            this.currentState[0][n] = 0;\n                            this.score += CURRENT * 2;\n                        }\n                }\n            }\n            for(let i = $a5fd07fa01589658$var$BOARD_SIZE - 1; i >= 0; i--)for(let n = $a5fd07fa01589658$var$BOARD_SIZE - 1; n >= 0; n--)switch(i){\n                case 2:\n                    if (this.currentState[3][n] === 0) {\n                        this.currentState[3][n] = this.currentState[i][n];\n                        this.currentState[i][n] = 0;\n                    }\n                    break;\n                case 1:\n                    if (this.currentState[2][n] === 0) {\n                        if (this.currentState[3][n] === 0) {\n                            this.currentState[3][n] = this.currentState[i][n];\n                            this.currentState[i][n] = 0;\n                        } else {\n                            this.currentState[2][n] = this.currentState[i][n];\n                            this.currentState[i][n] = 0;\n                        }\n                    }\n                    break;\n                case 0:\n                    if (this.currentState[1][n] === 0) {\n                        if (this.currentState[2][n] === 0) {\n                            if (this.currentState[3][n] === 0) {\n                                this.currentState[3][n] = this.currentState[i][n];\n                                this.currentState[i][n] = 0;\n                            } else {\n                                this.currentState[2][n] = this.currentState[i][n];\n                                this.currentState[i][n] = 0;\n                            }\n                        } else {\n                            this.currentState[1][n] = this.currentState[i][n];\n                            this.currentState[i][n] = 0;\n                        }\n                    }\n            }\n            this.clearField();\n            this.redrawGameField();\n            this.createPlayCell();\n        }\n    }\n    /**\n   * @returns {number}\n   */ getScore() {\n        return this.score;\n    }\n    getState() {\n        return this.currentState;\n    }\n    getStatus() {\n        let result = 0;\n        for(let i = 0; i < $a5fd07fa01589658$var$BOARD_SIZE; i++)this.currentState[i].forEach((a)=>{\n            result += a;\n        });\n        if (result === 0) return \"idle\";\n        for(let i = 0; i < $a5fd07fa01589658$var$BOARD_SIZE; i++)for(let n = 0; n < $a5fd07fa01589658$var$BOARD_SIZE; n++){\n            if (this.currentState[i][n] >= 2048) return \"win\";\n        }\n        if (this.checkForLose()) return \"lose\";\n        return \"playing\";\n    }\n    start() {\n        this.isStarted = true;\n        this.createPlayCell();\n        this.createPlayCell();\n    }\n    restart() {\n        this.isStarted = false;\n        this.score = 0;\n        this.currentState = [\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ],\n            [\n                0,\n                0,\n                0,\n                0\n            ]\n        ];\n        this.clearField();\n    }\n    clearField() {\n        for(let i = 0; i < $a5fd07fa01589658$var$BOARD_SIZE; i++)for(let n = 0; n < $a5fd07fa01589658$var$BOARD_SIZE; n++){\n            const CELL_TO_CLEAR = document.querySelector(\".cell\" + i + \"-\" + n);\n            CELL_TO_CLEAR.innerHTML = \"\";\n        }\n    }\n    redrawGameField() {\n        for(let i = 0; i < $a5fd07fa01589658$var$BOARD_SIZE; i++)for(let n = 0; n < $a5fd07fa01589658$var$BOARD_SIZE; n++){\n            const NUM_OF_CELL = this.currentState[i][n];\n            if (NUM_OF_CELL !== 0) {\n                const CELL = document.querySelector(`.cell${i}-${n}`);\n                const CELL_INSIDE = document.createElement(\"div\");\n                CELL_INSIDE.textContent = NUM_OF_CELL;\n                CELL_INSIDE.classList.add(\"field-cell--\" + NUM_OF_CELL);\n                CELL.appendChild(CELL_INSIDE);\n            }\n        }\n    }\n    generateRandom() {\n        return Math.floor(Math.random() * 4);\n    }\n    checkForLose() {\n        for(let i = 0; i < $a5fd07fa01589658$var$BOARD_SIZE; i++)for(let n = 0; n < $a5fd07fa01589658$var$BOARD_SIZE; n++){\n            if (this.currentState[i][n] === 0) return false;\n            if (n + 1 < $a5fd07fa01589658$var$BOARD_SIZE && this.currentState[i][n] === this.currentState[i][n + 1]) return false;\n            if (n - 1 >= 0 && this.currentState[i][n] === this.currentState[i][n - 1]) return false;\n            if (i + 1 < $a5fd07fa01589658$var$BOARD_SIZE && this.currentState[i][n] === this.currentState[i + 1][n]) return false;\n            if (i - 1 >= 0 && this.currentState[i][n] === this.currentState[i - 1][n]) return false;\n        }\n        return true;\n    }\n    createPlayCell() {\n        while(true){\n            const ROW = this.generateRandom();\n            const COLL = this.generateRandom();\n            const RANDOM_CELL = this.currentState[ROW][COLL];\n            if (RANDOM_CELL === 0) {\n                const NUM = Math.floor(Math.random() * 10);\n                let content = 0;\n                if (NUM === 0) {\n                    this.currentState[ROW][COLL] = 4;\n                    content = 4;\n                } else {\n                    this.currentState[ROW][COLL] = 2;\n                    content = 2;\n                }\n                const CELL = document.querySelector(`.cell${ROW}-${COLL}`);\n                const CELL_INSIDE = document.createElement(\"div\");\n                CELL_INSIDE.textContent = content;\n                CELL_INSIDE.classList.add(\"field-cell--\" + content);\n                CELL.appendChild(CELL_INSIDE);\n                break;\n            }\n        }\n    }\n    anilizeStatus() {\n        const result = this.getStatus();\n        if (result === \"win\") {\n            this.isStarted = false;\n            return \"win\";\n        } else if (result === \"lose\") {\n            this.isStarted = false;\n            return \"lose\";\n        }\n    }\n    visualiseScore(scoreElement) {\n        scoreElement.textContent = this.score;\n    }\n}\n$a5fd07fa01589658$exports = $a5fd07fa01589658$var$Game;\n\n\nconst $09e991522ca7e64e$var$game = new $a5fd07fa01589658$exports();\nconst $09e991522ca7e64e$var$START_BUTTON = document.querySelector(\".start\");\nconst $09e991522ca7e64e$var$SCORE = document.querySelector(\".game-score\");\nconst $09e991522ca7e64e$var$RESTART_BUTTON = document.querySelector(\".restart\");\nconst $09e991522ca7e64e$var$WIN_MESSAGE = document.querySelector(\".message-win\");\nconst $09e991522ca7e64e$var$LOSE_MESSAGE = document.querySelector(\".message-lose\");\nconst $09e991522ca7e64e$var$START_MESSAGE = document.querySelector(\".message-start\");\n$09e991522ca7e64e$var$START_BUTTON.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$START_BUTTON.style.display = \"none\";\n    $09e991522ca7e64e$var$RESTART_BUTTON.style.display = \"block\";\n    $09e991522ca7e64e$var$LOSE_MESSAGE.style.display = \"none\";\n    $09e991522ca7e64e$var$WIN_MESSAGE.style.display = \"none\";\n    $09e991522ca7e64e$var$START_MESSAGE.style.display = \"none\";\n});\n$09e991522ca7e64e$var$RESTART_BUTTON.addEventListener(\"click\", ()=>{\n    $09e991522ca7e64e$var$game.restart();\n    $09e991522ca7e64e$var$game.start();\n    $09e991522ca7e64e$var$LOSE_MESSAGE.style.display = \"none\";\n    $09e991522ca7e64e$var$WIN_MESSAGE.style.display = \"none\";\n    $09e991522ca7e64e$var$game.visualiseScore($09e991522ca7e64e$var$SCORE);\n});\ndocument.addEventListener(\"keydown\", (e)=>{\n    const key = e.key;\n    if (key === \"ArrowLeft\") {\n        $09e991522ca7e64e$var$game.moveLeft();\n        $09e991522ca7e64e$var$game.visualiseScore($09e991522ca7e64e$var$SCORE);\n        $09e991522ca7e64e$var$message();\n    } else if (key === \"ArrowRight\") {\n        $09e991522ca7e64e$var$game.moveRight();\n        $09e991522ca7e64e$var$game.visualiseScore($09e991522ca7e64e$var$SCORE);\n        $09e991522ca7e64e$var$message();\n    } else if (key === \"ArrowUp\") {\n        $09e991522ca7e64e$var$game.moveUp();\n        $09e991522ca7e64e$var$game.visualiseScore($09e991522ca7e64e$var$SCORE);\n        $09e991522ca7e64e$var$message();\n    } else if (key === \"ArrowDown\") {\n        $09e991522ca7e64e$var$game.moveDown();\n        $09e991522ca7e64e$var$game.visualiseScore($09e991522ca7e64e$var$SCORE);\n        $09e991522ca7e64e$var$message();\n    }\n});\nfunction $09e991522ca7e64e$var$message() {\n    const result = $09e991522ca7e64e$var$game.anilizeStatus($09e991522ca7e64e$var$game.getStatus());\n    if (result === \"win\") {\n        $09e991522ca7e64e$var$WIN_MESSAGE.style.display = \"block\";\n        return \"win\";\n    } else if (result === \"lose\") {\n        $09e991522ca7e64e$var$LOSE_MESSAGE.style.display = \"block\";\n        return \"lose\";\n    }\n    return \"playing\";\n}\n\n\n//# sourceMappingURL=index.c1007f3a.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\nconst START_BUTTON = document.querySelector('.start');\nconst SCORE = document.querySelector('.game-score');\nconst RESTART_BUTTON = document.querySelector('.restart');\nconst WIN_MESSAGE = document.querySelector('.message-win');\nconst LOSE_MESSAGE = document.querySelector('.message-lose');\nconst START_MESSAGE = document.querySelector('.message-start');\n\nSTART_BUTTON.addEventListener('click', () => {\n  game.start();\n  START_BUTTON.style.display = 'none';\n  RESTART_BUTTON.style.display = 'block';\n  LOSE_MESSAGE.style.display = 'none';\n  WIN_MESSAGE.style.display = 'none';\n  START_MESSAGE.style.display = 'none';\n});\n\nRESTART_BUTTON.addEventListener('click', () => {\n  game.restart();\n  game.start();\n  LOSE_MESSAGE.style.display = 'none';\n  WIN_MESSAGE.style.display = 'none';\n  game.visualiseScore(SCORE);\n});\n\ndocument.addEventListener('keydown', (e) => {\n  const key = e.key;\n\n  if (key === 'ArrowLeft') {\n    game.moveLeft();\n    game.visualiseScore(SCORE);\n    message();\n  } else if (key === 'ArrowRight') {\n    game.moveRight();\n    game.visualiseScore(SCORE);\n    message();\n  } else if (key === 'ArrowUp') {\n    game.moveUp();\n    game.visualiseScore(SCORE);\n    message();\n  } else if (key === 'ArrowDown') {\n    game.moveDown();\n    game.visualiseScore(SCORE);\n    message();\n  }\n});\n\nfunction message() {\n  const result = game.anilizeStatus(game.getStatus());\n\n  if (result === 'win') {\n    WIN_MESSAGE.style.display = 'block';\n\n    return 'win';\n  } else if (result === 'lose') {\n    LOSE_MESSAGE.style.display = 'block';\n\n    return 'lose';\n  }\n\n  return 'playing';\n}\n","'use strict';\n\nconst BOARD_SIZE = 4;\n\nclass Game {\n  constructor(initialState = [\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0],\n    [0, 0, 0, 0]]) {\n    this.score = 0;\n    this.initialState = initialState;\n    this.currentState = initialState;\n    this.isStarted = false;\n  }\n\n  moveLeft() {\n    let isAbleToMove = false;\n\n    for (let j = 0; j < BOARD_SIZE; j++) {\n      for (let l = 1; l < BOARD_SIZE; l++) {\n        if (this.currentState[j][l] === 0) {\n          isAbleToMove = true;\n        } else if (this.currentState[j][l] === this.currentState[j][l - 1]) {\n          isAbleToMove = true;\n        } else if (this.currentState[j][0] === 0) {\n          isAbleToMove = true;\n        }\n      }\n    }\n\n    if (isAbleToMove && this.isStarted) {\n      for (let i = 0; i < BOARD_SIZE; i++) { // changes numbers in array\n        for (let n = 0; n < BOARD_SIZE; n++) {\n          let changed = false;\n          const CURRENT = this.currentState[i][n];\n\n          if (CURRENT !== 0) {\n            for (let k = n + 1; k < BOARD_SIZE; k++) {\n              const NEIGHBOR = this.currentState[i][k];\n\n              if (NEIGHBOR !== 0) {\n                if (NEIGHBOR === CURRENT) {\n                  this.currentState[i][n] = CURRENT * 2;\n                  this.currentState[i][k] = 0;\n                  this.score += CURRENT * 2;\n                  changed = true;\n                }\n              } else if (NEIGHBOR === 0 && !changed) {\n                switch (k) {\n                  case 1 :\n                    if (this.currentState[i][k + 1] === 0) {\n                      if (this.currentState[i][k + 2] === CURRENT) {\n                        this.currentState[i][n] = CURRENT * 2;\n                        this.currentState[i][k + 2] = 0;\n                        changed = true;\n                        this.score += CURRENT * 2;\n                      }\n                    } else if (\n                      this.currentState[i][k + 1]\n                      === CURRENT && !changed) {\n                      this.currentState[i][n] = CURRENT * 2;\n                      this.currentState[i][k + 1] = 0;\n                      this.score += CURRENT * 2;\n                    }\n                    break;\n                  case 2 :\n                    if (this.currentState[i][k + 1] === CURRENT) {\n                      this.currentState[i][n] = CURRENT * 2;\n                      this.currentState[i][k + 1] = 0;\n                      this.score += CURRENT * 2;\n                    }\n                    break;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      for (let i = 0; i < BOARD_SIZE; i++) { // moves numbers to the left side\n        for (let n = 1; n < BOARD_SIZE; n++) {\n          if (this.currentState[i][n] !== 0) {\n            const current = this.currentState[i][n];\n\n            switch (n) {\n              case 1:\n                if (this.currentState[i][0] === 0) {\n                  this.currentState[i][0] = current;\n                  this.currentState[i][n] = 0;\n                }\n\n                break;\n\n              case 2:\n                if (this.currentState[i][1] === 0) {\n                  if (this.currentState[i][0] === 0) {\n                    this.currentState[i][0] = current;\n                    this.currentState[i][n] = 0;\n                  } else {\n                    this.currentState[i][1] = current;\n                    this.currentState[i][n] = 0;\n                  }\n                }\n\n                break;\n\n              case 3:\n                if (this.currentState[i][2] === 0) {\n                  if (this.currentState[i][1] === 0) {\n                    if (this.currentState[i][0] === 0) {\n                      this.currentState[i][0] = current;\n                      this.currentState[i][n] = 0;\n                    } else {\n                      this.currentState[i][1] = current;\n                      this.currentState[i][n] = 0;\n                    }\n                  } else {\n                    this.currentState[i][2] = current;\n                    this.currentState[i][n] = 0;\n                  }\n                }\n            }\n          }\n        }\n      }\n\n      this.clearField();\n      this.redrawGameField();\n      this.createPlayCell();\n    }\n  }\n\n  moveRight() {\n    let isAbleToMove = false;\n\n    for (let j = 0; j < BOARD_SIZE; j++) {\n      for (let l = 1; l < BOARD_SIZE; l++) {\n        if (this.currentState[j][l] === 0) {\n          isAbleToMove = true;\n        } else if (this.currentState[j][l] === this.currentState[j][l - 1]) {\n          isAbleToMove = true;\n        }\n      }\n    }\n\n    if (isAbleToMove && this.isStarted) {\n      for (let i = 0; i < BOARD_SIZE; i++) { // changes numbers in array\n        for (let n = BOARD_SIZE - 1; n >= 0; n--) {\n          let changed = false;\n          const CURRENT = this.currentState[i][n];\n\n          if (CURRENT !== 0) {\n            for (let k = n - 1; k >= 0; k--) {\n              const NEIGHBOR = this.currentState[i][k];\n\n              if (NEIGHBOR !== 0) {\n                if (NEIGHBOR === CURRENT && k === n - 1) {\n                  this.currentState[i][n] = CURRENT * 2;\n                  this.currentState[i][k] = 0;\n                  changed = true;\n                }\n              } else if (NEIGHBOR === CURRENT && !changed) {\n                switch (k) {\n                  case 0 :\n                    if (this.currentState[i][1] === 0 && !changed) {\n                      if (this.currentState[i][2] === 0) {\n                        this.currentState[i][n] = CURRENT * 2;\n                        this.currentState[i][k] = 0;\n                        changed = true;\n                        this.score += CURRENT * 2;\n                      }\n                    }\n                    break;\n                  case 1 :\n                    if (this.currentState[i][2] === 0 && !changed) {\n                      this.currentState[i][n] = CURRENT * 2;\n                      this.currentState[i][k] = 0;\n                      changed = true;\n                      this.score += CURRENT * 2;\n                    }\n                    break;\n                }\n              }\n            }\n          }\n        }\n      }\n\n      for (let i = 0; i < BOARD_SIZE; i++) { // moves numbers to the right side\n        for (let n = BOARD_SIZE - 1; n >= 0; n--) {\n          if (this.currentState[i][n] !== 0) {\n            const current = this.currentState[i][n];\n\n            switch (n) {\n              case 0:\n                if (this.currentState[i][1] === 0) {\n                  if (this.currentState[i][2] === 0) {\n                    if (this.currentState[i][3] === 0) {\n                      this.currentState[i][3] = current;\n                      this.currentState[i][n] = 0;\n                    } else {\n                      this.currentState[i][2] = current;\n                      this.currentState[i][n] = 0;\n                    }\n                  } else {\n                    this.currentState[i][1] = current;\n                    this.currentState[i][n] = 0;\n                  }\n                }\n\n                break;\n\n              case 1:\n                if (this.currentState[i][2] === 0) {\n                  if (this.currentState[i][3] === 0) {\n                    this.currentState[i][3] = current;\n                    this.currentState[i][n] = 0;\n                  } else {\n                    this.currentState[i][2] = current;\n                    this.currentState[i][n] = 0;\n                  }\n                }\n\n                break;\n\n              case 2:\n                if (this.currentState[i][3] === 0) {\n                  this.currentState[i][3] = current;\n                  this.currentState[i][n] = 0;\n                }\n            }\n          }\n        }\n      }\n\n      this.clearField();\n      this.redrawGameField();\n      this.createPlayCell();\n    }\n  }\n\n  moveUp() {\n    let isAbleToMove = false;\n\n    for (let j = 1; j < BOARD_SIZE; j++) {\n      for (let l = 0; l < BOARD_SIZE; l++) {\n        if (this.currentState[j][l] === 0) {\n          isAbleToMove = true;\n        } else if (this.currentState[j][l] === this.currentState[j - 1][l]) {\n          isAbleToMove = true;\n        } else if (this.currentState[0][l] === 0) {\n          isAbleToMove = true;\n        }\n      }\n    }\n\n    if (isAbleToMove && this.isStarted) {\n      for (let i = 0; i < BOARD_SIZE; i++) { // merges numbers\n        for (let n = 0; n < BOARD_SIZE; n++) {\n          const CURRENT = this.currentState[i][n];\n\n          switch (i) {\n            case 0:\n              if (this.currentState[1][n] === 0) {\n                if (this.currentState[2][n] === 0) {\n                  if (this.currentState[3][n] === CURRENT) {\n                    this.currentState[i][n] = 2 * CURRENT;\n                    this.currentState[3][n] = 0;\n                    this.score += CURRENT * 2;\n                  }\n                } else if (this.currentState[2][n] === CURRENT) {\n                  this.currentState[i][n] = 2 * CURRENT;\n                  this.currentState[2][n] = 0;\n                  this.score += CURRENT * 2;\n                }\n              } else if (this.currentState[1][n] === CURRENT) {\n                this.currentState[i][n] = 2 * CURRENT;\n                this.currentState[1][n] = 0;\n                this.score += CURRENT * 2;\n              }\n\n              break;\n\n            case 1 :\n              if (this.currentState[2][n] === 0) {\n                if (this.currentState[3][n] === CURRENT) {\n                  this.currentState[i][n] = 2 * CURRENT;\n                  this.currentState[3][n] = 0;\n                  this.score += CURRENT * 2;\n                }\n              } else if (this.currentState[2][n] === CURRENT) {\n                this.currentState[i][n] = 2 * CURRENT;\n                this.currentState[2][n] = 0;\n                this.score += CURRENT * 2;\n              }\n\n              break;\n\n            case 2:\n              if (this.currentState[3][n] === CURRENT) {\n                this.currentState[i][n] = 2 * CURRENT;\n                this.currentState[3][n] = 0;\n                this.score += CURRENT * 2;\n              }\n          }\n        }\n      }\n\n      for (let i = 0; i < BOARD_SIZE; i++) { // moves numbers in array\n        for (let n = 0; n < BOARD_SIZE; n++) {\n          switch (i) {\n            case 1:\n              if (this.currentState[0][n] === 0) {\n                this.currentState[0][n] = this.currentState[i][n];\n                this.currentState[i][n] = 0;\n              }\n\n              break;\n\n            case 2:\n              if (this.currentState[1][n] === 0) {\n                if (this.currentState[0][n] === 0) {\n                  this.currentState[0][n] = this.currentState[i][n];\n                  this.currentState[i][n] = 0;\n                } else {\n                  this.currentState[1][n] = this.currentState[i][n];\n                  this.currentState[i][n] = 0;\n                }\n              }\n\n              break;\n\n            case 3:\n              if (this.currentState[2][n] === 0) {\n                if (this.currentState[1][n] === 0) {\n                  if (this.currentState[0][n] === 0) {\n                    this.currentState[0][n] = this.currentState[i][n];\n                    this.currentState[i][n] = 0;\n                  } else {\n                    this.currentState[1][n] = this.currentState[i][n];\n                    this.currentState[i][n] = 0;\n                  }\n                } else {\n                  this.currentState[2][n] = this.currentState[i][n];\n                  this.currentState[i][n] = 0;\n                }\n              }\n          }\n        }\n      }\n\n      this.clearField();\n      this.redrawGameField();\n      this.createPlayCell();\n    }\n  }\n\n  moveDown() {\n    let isAbleToMove = false;\n\n    for (let j = 1; j < BOARD_SIZE; j++) {\n      for (let l = 0; l < BOARD_SIZE; l++) {\n        if (this.currentState[j][l] === 0) {\n          isAbleToMove = true;\n        } else if (this.currentState[j][l] === this.currentState[j - 1][l]) {\n          isAbleToMove = true;\n        }\n      }\n    }\n\n    if (isAbleToMove && this.isStarted) {\n      for (let i = BOARD_SIZE - 1; i >= 0; i--) { // merges numbers\n        for (let n = BOARD_SIZE - 1; n >= 0; n--) {\n          const CURRENT = this.currentState[i][n];\n\n          switch (i) {\n            case 3:\n              if (this.currentState[2][n] === 0) {\n                if (this.currentState[1][n] === 0) {\n                  if (this.currentState[0][n] === CURRENT) {\n                    this.currentState[i][n] = 2 * CURRENT;\n                    this.currentState[0][n] = 0;\n                    this.score += CURRENT * 2;\n                  }\n                } else if (this.currentState[1][n] === CURRENT) {\n                  this.currentState[i][n] = 2 * CURRENT;\n                  this.currentState[1][n] = 0;\n                  this.score += CURRENT * 2;\n                }\n              } else if (this.currentState[2][n] === CURRENT) {\n                this.currentState[i][n] = 2 * CURRENT;\n                this.currentState[2][n] = 0;\n                this.score += CURRENT * 2;\n              }\n\n              break;\n\n            case 2 :\n              if (this.currentState[1][n] === 0) {\n                if (this.currentState[0][n] === CURRENT) {\n                  this.currentState[i][n] = 2 * CURRENT;\n                  this.currentState[0][n] = 0;\n                  this.score += CURRENT * 2;\n                }\n              } else if (this.currentState[1][n] === CURRENT) {\n                this.currentState[i][n] = 2 * CURRENT;\n                this.currentState[1][n] = 0;\n                this.score += CURRENT * 2;\n              }\n\n              break;\n\n            case 1:\n              if (this.currentState[0][n] === CURRENT) {\n                this.currentState[i][n] = 2 * CURRENT;\n                this.currentState[0][n] = 0;\n                this.score += CURRENT * 2;\n              }\n          }\n        }\n      }\n\n      for (let i = BOARD_SIZE - 1; i >= 0; i--) { // moves numbers in array\n        for (let n = BOARD_SIZE - 1; n >= 0; n--) {\n          switch (i) {\n            case 2:\n              if (this.currentState[3][n] === 0) {\n                this.currentState[3][n] = this.currentState[i][n];\n                this.currentState[i][n] = 0;\n              }\n\n              break;\n\n            case 1:\n              if (this.currentState[2][n] === 0) {\n                if (this.currentState[3][n] === 0) {\n                  this.currentState[3][n] = this.currentState[i][n];\n                  this.currentState[i][n] = 0;\n                } else {\n                  this.currentState[2][n] = this.currentState[i][n];\n                  this.currentState[i][n] = 0;\n                }\n              }\n\n              break;\n\n            case 0:\n              if (this.currentState[1][n] === 0) {\n                if (this.currentState[2][n] === 0) {\n                  if (this.currentState[3][n] === 0) {\n                    this.currentState[3][n] = this.currentState[i][n];\n                    this.currentState[i][n] = 0;\n                  } else {\n                    this.currentState[2][n] = this.currentState[i][n];\n                    this.currentState[i][n] = 0;\n                  }\n                } else {\n                  this.currentState[1][n] = this.currentState[i][n];\n                  this.currentState[i][n] = 0;\n                }\n              }\n          }\n        }\n      }\n\n      this.clearField();\n      this.redrawGameField();\n      this.createPlayCell();\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    return this.score;\n  }\n\n  getState() {\n    return this.currentState;\n  }\n\n  getStatus() {\n    let result = 0;\n\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      this.currentState[i].forEach((a) => {\n        result += a;\n      });\n    }\n\n    if (result === 0) {\n      return 'idle';\n    }\n\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      for (let n = 0; n < BOARD_SIZE; n++) {\n        if (this.currentState[i][n] >= 2048) {\n          return 'win';\n        }\n      }\n    }\n\n    if (this.checkForLose()) {\n      return 'lose';\n    }\n\n    return 'playing';\n  }\n\n  start() {\n    this.isStarted = true;\n    this.createPlayCell();\n    this.createPlayCell();\n  }\n\n  restart() {\n    this.isStarted = false;\n    this.score = 0;\n\n    this.currentState = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n\n    this.clearField();\n  }\n\n  clearField() {\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      for (let n = 0; n < BOARD_SIZE; n++) {\n        const CELL_TO_CLEAR = document.querySelector('.cell' + i + '-' + n);\n\n        CELL_TO_CLEAR.innerHTML = '';\n      }\n    }\n  }\n\n  redrawGameField() {\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      for (let n = 0; n < BOARD_SIZE; n++) {\n        const NUM_OF_CELL = this.currentState[i][n];\n\n        if (NUM_OF_CELL !== 0) {\n          const CELL = document.querySelector(`.cell${i}-${n}`);\n          const CELL_INSIDE = document.createElement('div');\n\n          CELL_INSIDE.textContent = NUM_OF_CELL;\n          CELL_INSIDE.classList.add('field-cell--' + NUM_OF_CELL);\n          CELL.appendChild(CELL_INSIDE);\n        }\n      }\n    }\n  }\n\n  generateRandom() {\n    return Math.floor(Math.random() * 4);\n  }\n\n  checkForLose() {\n    for (let i = 0; i < BOARD_SIZE; i++) {\n      for (let n = 0; n < BOARD_SIZE; n++) {\n        if (this.currentState[i][n] === 0) {\n          return false;\n        }\n\n        if (\n          n + 1 < BOARD_SIZE\n          && this.currentState[i][n] === this.currentState[i][n + 1]) {\n          return false;\n        }\n\n        if (\n          n - 1 >= 0\n          && this.currentState[i][n] === this.currentState[i][n - 1]) {\n          return false;\n        }\n\n        if\n        (\n          i + 1 < BOARD_SIZE\n          && this.currentState[i][n] === this.currentState[i + 1][n]) {\n          return false;\n        }\n\n        if (\n          i - 1 >= 0\n          && this.currentState[i][n] === this.currentState[i - 1][n]) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  createPlayCell() {\n    while (true) {\n      const ROW = this.generateRandom();\n      const COLL = this.generateRandom();\n      const RANDOM_CELL = this.currentState[ROW][COLL];\n\n      if (RANDOM_CELL === 0) {\n        const NUM = Math.floor(Math.random() * 10);\n        let content = 0;\n\n        if (NUM === 0) {\n          this.currentState[ROW][COLL] = 4;\n          content = 4;\n        } else {\n          this.currentState[ROW][COLL] = 2;\n          content = 2;\n        }\n\n        const CELL = document.querySelector(`.cell${ROW}-${COLL}`);\n        const CELL_INSIDE = document.createElement('div');\n\n        CELL_INSIDE.textContent = content;\n        CELL_INSIDE.classList.add('field-cell--' + content);\n        CELL.appendChild(CELL_INSIDE);\n\n        break;\n      }\n    }\n  }\n\n  anilizeStatus() {\n    const result = this.getStatus();\n\n    if (result === 'win') {\n      this.isStarted = false;\n\n      return 'win';\n    } else if (result === 'lose') {\n      this.isStarted = false;\n\n      return 'lose';\n    }\n  }\n\n  visualiseScore(scoreElement) {\n    scoreElement.textContent = this.score;\n  }\n}\n\nmodule.exports = Game;\n"],"names":["$09e991522ca7e64e$var$game","constructor","initialState","score","currentState","isStarted","moveLeft","isAbleToMove","j","l","i","n","changed","CURRENT","k","NEIGHBOR","current","clearField","redrawGameField","createPlayCell","moveRight","$a5fd07fa01589658$var$BOARD_SIZE","moveUp","moveDown","getScore","getState","getStatus","result","forEach","a","checkForLose","start","restart","CELL_TO_CLEAR","document","querySelector","innerHTML","NUM_OF_CELL","CELL","CELL_INSIDE","createElement","textContent","classList","add","appendChild","generateRandom","Math","floor","random","ROW","COLL","RANDOM_CELL","content","NUM","anilizeStatus","visualiseScore","scoreElement","$09e991522ca7e64e$var$START_BUTTON","$09e991522ca7e64e$var$SCORE","$09e991522ca7e64e$var$RESTART_BUTTON","$09e991522ca7e64e$var$WIN_MESSAGE","$09e991522ca7e64e$var$LOSE_MESSAGE","$09e991522ca7e64e$var$START_MESSAGE","$09e991522ca7e64e$var$message","style","display","addEventListener","e","key"],"version":3,"file":"index.c1007f3a.js.map"}